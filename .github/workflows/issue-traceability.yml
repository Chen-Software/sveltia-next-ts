name: Issue Traceability

on:
  pull_request:
    types: [opened, reopened, synchronize]
env:
  RADICLE_SITE: "git.chen.so"
  RADICLE_URL: "https://git.chen.so"

jobs:
  annotate-commits:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history for commit rewriting

      - name: Retrieve Radicle Issue ID from PR Body
        id: extract_issue
        run: |
          PR_BODY='${{ github.event.pull_request.body }}'
          
          # Try different formats for finding the issue ID
          
          # 1. Try to extract from a full URL
          ISSUE_ID=$(echo "$PR_BODY" | grep -Eo "https://$RADICLE_SITE/[^/]+/i/[0-9a-f]{40}" | sed -E 's#.*/i/##' | head -n1)
          
          # 2. If not found, look for a standalone 40-character SHA (this is the direct issue ID)
          if [ -z "$ISSUE_ID" ]; then
            ISSUE_ID=$(echo "$PR_BODY" | grep -Eo '\b[0-9a-f]{40}\b' | head -n1)
          fi

          # If still not found, mark as not found but don't exit
          if [ -z "$ISSUE_ID" ]; then
            echo "No issue reference found in PR body."
            echo "issue_found=false" >> $GITHUB_OUTPUT
            # Set a default ISSUE_ID to avoid errors in later steps
            ISSUE_ID="not_found"
          else
            echo "issue_found=true" >> $GITHUB_OUTPUT
            echo "Found Issue ID: $ISSUE_ID"
          fi

          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
        shell: bash

      - name: Amend Commit Messages with Radicle Issue Link
        if: steps.extract_issue.outputs.issue_found == 'true'
        env:
          REPO_NAME: ${{ github.event.repository.name }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
        run: |
          # --- Safety Checks ---
          # Ensure ISSUE_ID environment variable is set
          if [ -z "$ISSUE_ID" ]; then
            echo "::error::ISSUE_ID environment variable is not set. Cannot amend commits."
            exit 1
          fi
          # Ensure REPO_NAME environment variable is set
          if [ -z "$REPO_NAME" ]; then
            echo "::error::REPO_NAME environment variable is not set. Cannot amend commits."
            exit 1
          fi
          # Ensure BASE_SHA environment variable is set
          if [ -z "$BASE_SHA" ]; then
            echo "::error::BASE_SHA environment variable is not set. Cannot amend commits."
            exit 1
          fi

          # --- Git Configuration ---
          # Configure Git user for the changes made by this action
          git config user.name "github-actions[bot]"
          git config user.email "github-actions+bot+users.noreply@chen.software"

          # --- Amend Logic ---
          # Construct the full Radicle issue URL
          ISSUE_URL="https://git.chen.so/${REPO_NAME}/i/${ISSUE_ID}"

          # Make the script executable
          chmod +x .github/scripts/issue-traceability-amend-commit-msg.sh

          # Execute the script, passing required variables
          ISSUE_URL="$ISSUE_URL" BASE_SHA="$BASE_SHA" .github/scripts/issue-traceability-amend-commit-msg.sh
        shell: bash

      - name: Push Amended Commits
        if: steps.extract_issue.outputs.issue_found == 'true'
        run: |
          git push --force-with-lease origin HEAD:${{ github.event.pull_request.head.ref }}
        shell: bash

      - name: Calculate Issue Traceability
        id: traceability_report
        env:
          # Make repository name available to pass to the script
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # Calculate total commits and issue commits across the repository
          total_commits=$(git rev-list --count HEAD)
          # Make grep more specific to the start of the line for accuracy
          issue_commits=$(git log --format=%B HEAD | grep -cE "^- Issue: https://$RADICLE_SITE/")
          
          # Calculate PR-specific commits (commits between BASE_REF and HEAD)
          pr_total_commits=$(git rev-list --count ${{ github.event.pull_request.base.sha }}..HEAD)
          pr_issue_commits=$(git log --format=%B ${{ github.event.pull_request.base.sha }}..HEAD | grep -cE "^- Issue: https://$RADICLE_SITE/")
          
          # Make the report generation script executable
          chmod +x .github/scripts/issue-traceability-generate-report.sh

          # Run the script and capture its output
          report_output=$(.github/scripts/issue-traceability-generate-report.sh "$total_commits" "$issue_commits" "$REPO_NAME" "$pr_total_commits" "$pr_issue_commits")

          # Check if the script executed successfully
          if [ $? -ne 0 ]; then
            echo "::error::Report generation script failed."
            # Output a fallback message
            echo "report_message=Failed to generate traceability report." >> $GITHUB_OUTPUT
            exit 1
          fi

          # Output the captured report for the next step using multi-line syntax
          echo "report_message<<EOF" >> $GITHUB_OUTPUT
          echo "$report_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Also print to logs for debugging
          echo "--- Generated Report ---"
          echo "$report_output"
          echo "------------------------"
        shell: bash

      - name: Find Existing Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Issue Traceability Report'

      - name: Post or Update Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.traceability_report.outputs.report_message }}
          edit-mode: replace

      - name: Check Issue Requirement
        if: steps.extract_issue.outputs.issue_found == 'false'
        run: |
          echo "::error::No issue reference found in PR body. Please add a Radicle issue reference to the PR description."
          exit 1
        shell: bash
